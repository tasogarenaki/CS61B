package byog.Core;

import byog.SaveDemo.World;
import byog.TileEngine.TETile;
import byog.TileEngine.Tileset;
import edu.princeton.cs.introcs.StdDraw;

import javax.swing.*;
import java.util.List;
import java.util.ArrayList;
import java.util.ArrayDeque;
import java.util.Random;

import java.awt.*;

public class MapGenerator {
    private static final int WIDTH = 80;
    private static final int HEIGHT = 30;

    private static final int ROOMMAXLEN = 8;

    private static final int MIN_X = 0;
    private static final int MIN_Y = 0;

    private static final int ROOM_LIMIT = 200;   // maximum number of rooms


    /* Directions */
    private static final int NORTH = 0;
    private static final int SOUTH = 1;
    private static final int WEST = 2;
    private static final int EAST = 3;
    private static final int NORTHWEST = 4;
    private static final int NORTHEAST = 5;
    private static final int SOUTHWEST = 6;
    private static final int SOUTHEAST = 7;


    /* Set font size to displayed. */
    private static final int TITLE_FONT_SIZE = 40;
    private static final int INITIAL_COMMANDS_FONT_SIZE = 30;
    private static final int HUD_FONT_SIZE = 16;


    /**
     * World
     * Generate a random world map contains rooms and hallways.
     */

    private static class World {
        private List<Room> rooms;
        private List<Hallway> hallways;
        private TETile[][] map;

        World() {
            rooms = new ArrayList<>();
            hallways = new ArrayList<>();
            map = new TETile[WIDTH][HEIGHT];
        }
    }

    /**
     * Region
     * The region of rooms and hallways should be connected.
     */
    private static class Region {
        List<Connect> connects;
        boolean connected;
    }

    /**
     * Room
     * The room is completely determined by its coordinates.
     */
    private static class Room extends Region {
        Coordinate topRight;
        Coordinate botLeft;

        Room(Coordinate topRight, Coordinate botLeft) {
            this.topRight = topRight;
            this.botLeft = botLeft;
            connected = false;
            connects = new ArrayList<>();
        }
    }

    /**
     * Hallway
     * Represents a generic hallway.
     */
    private static class Hallway extends Region {
        List<Coordinate> coors;

        Hallway() {
            coors = new ArrayList<>();
            connects = new ArrayList<>();
            connected = false;
        }
    }

    /**
     * Coordinate
     * Coordinates of the world.
     */
    protected static class Coordinate {
        int x;
        int y;

        Coordinate(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    /**
     * Connect
     * Connects rooms.
     */
    private static class Connect {
        Coordinate coors;
        Region connectTo;

        Connect(Coordinate coors, Region connectTo) {
            this.coors = coors;
            this.connectTo = connectTo;
        }
    }


    /**
     *
     * @param rand
     * @return
     */
    public static TETile[][] generateWorld(Random rand) {
        World world = new World();
        TETile[][] map = world.map;

        /* Initialize the world. */
        for (int x = 0; x < WIDTH; x++) {
            for (int y = 0; y < HEIGHT; y++) {
                map[x][y] = Tileset.NOTHING;
            }
        }
        // TODO: generate the world with rooms and connect them.
        generateRoom(world, rand);
        generateMaze(world, rand);
        findConnects(world);
        connectRegions(world, rand);


        return world.map;
    }

    /**
     * Generates random rooms in the world.
     * @param world the world contains random rooms.
     * @param rand  random generated by seed.
     */
    private static void generateRoom(World world, Random rand) {
        for (int i = 0; i < ROOM_LIMIT; i++) {
            /* Set room size. */
            int botLeftX = RandomUtils.uniform(rand, MIN_X, WIDTH);
            int botLeftY = RandomUtils.uniform(rand, MIN_Y, HEIGHT);
            int topRightX = 2 * RandomUtils.uniform(rand, (botLeftX + 1) / 2,
                    Integer.min(WIDTH, botLeftX + ROOMMAXLEN) / 2);
            int topRightY = 2 * RandomUtils.uniform(rand, (botLeftY + 1) / 2,
                    Integer.min(HEIGHT, botLeftY + ROOMMAXLEN) / 2);

            /* Generate World via Coordinates. */
            Room newRoom = new Room(new Coordinate(botLeftX, botLeftY),
                    new Coordinate(topRightX, topRightY));

            if (!isRoomOverlap(world, newRoom)) {
                world.rooms.add(newRoom);
            }
        }
        fillRoom(world);
    }


    /**
     * Check whether two rooms are overlapped.
     * @param world a list of rooms.
     * @param newRoom  the room to be checked.
     * @return
     */
    private static boolean isRoomOverlap(World world, Room newRoom) {
        for (int i = 0; i < world.rooms.size(); i++) {
            Room curRoom = world.rooms.get(i);
            boolean res;

            res = !(newRoom.topRight.x + 1 < curRoom.botLeft.x
                    || newRoom.topRight.y + 1 < curRoom.botLeft.y
                    || newRoom.botLeft.x - 1 > curRoom.topRight.x
                    || newRoom.botLeft.y - 1 > curRoom.topRight.y);

            if (res) {
                return true;
            }
        }
        return false;
    }

    /**
     * Fill rooms with floors and surround them with walls.
     *
     *  ---------------------------------
     *  |                   tR(x+1, y+1)|
     *  |  W          WALL           W  |
     *  |  A   |-----------------    A  |
     *  |  L   | Room    tR(x,y)|    L  |
     *  |  L   | bL(x,y)        |    L  |
     *  |      -------------------->    |
     *  |bL(x-1, y-1)    WALL           |
     *  ---------------------------------
     * @param world a list of rooms.
     */
    private static void fillRoom(World world) {
        for (int i = 0; i < world.rooms.size(); i++) {
            Room curRoom = world.rooms.get(i);

            /* Floors */
            for (int x = curRoom.botLeft.x; x <= curRoom.topRight.x; x++) {
                for (int y = curRoom.botLeft.y; y <= curRoom.topRight.y; y++) {
                    world.map[x][y] = Tileset.FLOOR;
                }
            }

            /* Walls */
            for (int x = curRoom.botLeft.x - 1; x <= curRoom.topRight.x + 1; x++) {
                world.map[x][curRoom.botLeft.y - 1] = Tileset.WALL;
                world.map[x][curRoom.topRight.y + 1] = Tileset.WALL;
            }

            for (int y = curRoom.botLeft.y ; y <= curRoom.topRight.y; y++) {
                world.map[curRoom.botLeft.x - 1][y] = Tileset.WALL;
                world.map[curRoom.topRight.x + 1][y] = Tileset.WALL;
            }
        }
    }

    /**
     * Maze Generation.
     * @param world a list of rooms.
     * @param rand random generated by seed.
     */
    private static void generateMaze(World world, Random rand) {
        for (int x = 1; x < WIDTH; x++) {
            for (int y = 1; y < HEIGHT; y++) {
                if (world.map[x][y].equals(Tileset.NOTHING)) {
                    Hallway hallway = new Hallway();
                    Coordinate coors = new Coordinate(x, y);
                    fillMaze(world.map, rand, hallway, coors);
                    hallwayWall(world.map, hallway);
                    world.hallways.add(hallway);
                }
            }
        }
    }

    /**
     * Generate the maze using the flood fill algorithm.
     * @param worldMap
     * @param rand
     * @param hallway
     * @param coord
     */
    private static void fillMaze(TETile[][] worldMap, Random rand, Hallway hallway, Coordinate coord) {
        int x = coord.x;
        int y = coord.y;
        int lastDir = RandomUtils.uniform(rand, 4);

        /* Check whether it is already filled or if it is at the boundary. */
        if (worldMap[x][y].equals(Tileset.FLOOR) || worldMap[x][y].equals(Tileset.WALL)
                || x == 0 || y == 0 || x == WIDTH || y == HEIGHT) {
            return;
        }

        /* Create a queue and enqueue the coordinates. */
        ArrayDeque<Coordinate> stack = new ArrayDeque<>();
        stack.add(coord);
        hallway.coors.add(coord);
        worldMap[x][y] = Tileset.FLOOR;

        while(!stack.isEmpty()) {
            int dir;
            List<Integer> avblDir = new ArrayList<>();
            coord = stack.getLast();

            for (int i = 0; i < 4; i++) {
                //Coordinate firstCoord = applyDir(i, 1, coord);
                Coordinate secondCoord = applyDir(i, 2, coord);

                /* Unavailable Coordinate.*/
                if (secondCoord.x <= 0 || secondCoord.x >= WIDTH
                        || secondCoord.y <= 0 || secondCoord.y >= HEIGHT) {
                    continue;
                }

                /* Available Coordinate. */
                if (worldMap[secondCoord.x][secondCoord.y].equals(Tileset.NOTHING)) {
                    avblDir.add(i);
                }
            }

            if (!avblDir.isEmpty()) {
                if (avblDir.contains(lastDir) && RandomUtils.uniform(rand, 100) > 40) {
                    dir = lastDir;
                } else {
                    dir = avblDir.get(RandomUtils.uniform(rand, avblDir.size()));
                }

                Coordinate firstCoord = applyDir(dir, 1, coord);
                Coordinate secondCoord = applyDir(dir, 2, coord);
                worldMap[firstCoord.x][firstCoord.y] = Tileset.FLOOR;
                worldMap[secondCoord.x][secondCoord.y] = Tileset.FLOOR;
                stack.addLast(secondCoord);

                if (!hallway.coors.contains(firstCoord)) {
                    hallway.coors.add(firstCoord);
                }
                if (!hallway.coors.contains(secondCoord)) {
                    hallway.coors.add(secondCoord);
                }
                lastDir = dir;
            } else {
                stack.removeLast();
            }
        }
    }

    /**
     * Directions and distance to coordinate.
     * @param dir
     * @param distance
     * @param coord
     * @return  coordinate
     */
    protected static Coordinate applyDir(int dir, int distance, Coordinate coord) {
        switch (dir) {
            case NORTH:
                return new Coordinate(coord.x, coord.y + distance);
            case SOUTH:
                return new Coordinate(coord.x, coord.y - distance);
            case WEST:
                return new Coordinate(coord.x - distance, coord.y);
            case EAST:
                return new Coordinate(coord.x + distance, coord.y);
            case NORTHWEST:
                return new Coordinate(coord.x - 1, coord.y + 1);
            case NORTHEAST:
                return new Coordinate(coord.x + 1, coord.y + 1);
            case SOUTHWEST:
                return new Coordinate(coord.x - 1, coord.y - 1);
            case SOUTHEAST:
                return new Coordinate(coord.x + 1, coord.y - 1);
            default:
                return null;
        }
    }


    /**
     * Generate wall for hallways.
     * @param worldMap
     * @param hallway
     */
    private static void hallwayWall(TETile[][] worldMap, Hallway hallway) {
        for (int i = 0; i < hallway.coors.size(); i++) {
            Coordinate coord = hallway.coors.get(i);
            for (int j = 0; j < 8; j++) {
                /* Neighbors in all eight directions of the current coordinates of a hallway. */
                Coordinate coord2 = applyDir(j, 1, coord);
                if (worldMap[coord2.x][coord2.y].equals(Tileset.NOTHING)) {
                    worldMap[coord2.x][coord2.y] = Tileset.WALL;
                }
            }
        }
    }

    /**
     * Two spaces should be separated by a wall. A coordinate inside the wall should contain
     * a maximum of 2 floor coordinates (either above and below or left and right).
     * This implies that if two coordinates are present, the spaces are adjacent and should connect.
     * @param world
     */
    private static void findConnects(World world) {
        for (int x = 1; x < WIDTH; x++) {
            for (int y = 1; y < HEIGHT; y++) {
                if (world.map[x][y].equals(Tileset.WALL)) {
                    List<Coordinate> floor_coord = new ArrayList<>();
                    /* Check whether the coordinate adjacent to the wall is a floor. */
                    for (int i = 0; i < 4; i++) {
                        Coordinate exp_coord = applyDir(i, 1, new Coordinate(x, y));
                        if (world.map[exp_coord.x][exp_coord.y].equals(Tileset.FLOOR)) {
                            floor_coord.add(exp_coord);
                        }
                    }
                    /* If the spaces are adjacent. */
                    if (floor_coord.size() == 2) {
                        /* Determine which room or hallway the two floors belong to. */
                        List<Region> belongsTo = new ArrayList<>();
                        for (int i = 0; i < 2; i++) {
                            Coordinate temp = floor_coord.get(i);
                            for (int j = 0; j < world.rooms.size(); j++) {
                                Room temp_room = world.rooms.get(j);
                                if (((temp.x == temp_room.botLeft.x || temp.x == temp_room.topRight.x)
                                        && (temp.y >= temp_room.botLeft.y || temp.y <= temp_room.topRight.y))
                                        || ((temp.y == temp_room.botLeft.y || temp.y == temp_room.topRight.y)
                                        && (temp.x <= temp_room.topRight.x
                                        && temp.x >= temp_room.botLeft.x))) {
                                    belongsTo.add(temp_room);
                                    break;
                                }
                            }
                            for (int j = 0; j < world.hallways.size(); j++) {
                                Hallway temp_hallway = world.hallways.get(j);
                                for (int m = 0; m < temp_hallway.coors.size(); m++) {
                                    Coordinate temp_coord = temp_hallway.coors.get(m);
                                    if (temp_coord.x == temp.x && temp_coord.y == temp.y) {
                                        belongsTo.add(temp_hallway);
                                    }
                                }
                            }
                        }
                        if (belongsTo.size() == 2 && !belongsTo.get(0).equals(belongsTo.get(1))) {
                            for (int i = 0; i < 2; i++) {
                                Region region = belongsTo.get(i);
                                region.connects.add(new Connect(new Coordinate(x, y),
                                        belongsTo.get(i - 1)));
                            }
                        }
                    }
                }
            }
        }
    }

    // TODO: connect the regions
    private static void connectRegions(World world, Random rand) {
        int index_rooms = RandomUtils.uniform(rand, world.rooms.size());
        world.rooms.get(index_rooms).connected = true;
        List<Connect> list_connects = new ArrayList<>(world.rooms.get(index_rooms).connects);

        while (!list_connects.isEmpty()) {
            int index_connects = RandomUtils.uniform(rand, list_connects.size());
            Connect cont = list_connects.get(index_connects);
            Coordinate coord = cont.coors;


        }



    }


























    protected static Coordinate getPlayer() {
        for (int x = 0; x < WIDTH; x++) {
            for (int y = 0; y < WIDTH; y++) {
                // TODO: find the player and return it

            }
        }

        return null;

    }











    protected static void displayMessage(String message) {
        Font font = StdDraw.getFont();
        StdDraw.clear(StdDraw.BLACK);
        StdDraw.setPenColor(Color.WHITE);
        StdDraw.setFont(font.deriveFont(Font.BOLD, TITLE_FONT_SIZE));
        StdDraw.text(WIDTH / 2, HEIGHT / 2, message);
        StdDraw.setFont(font);
        StdDraw.show();
    }





}
