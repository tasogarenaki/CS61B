package byog.Core;

import byog.SaveDemo.World;
import byog.TileEngine.TETile;
import byog.TileEngine.Tileset;
import edu.princeton.cs.introcs.StdDraw;

import java.util.List;
import java.util.ArrayList;
import java.util.ArrayDeque;
import java.util.Random;

import java.awt.*;

public class MapGenerator {
    private static final int WIDTH = 80;
    private static final int HEIGHT = 30;

    private static final int ROOMMAXLEN = 8;

    private static final int MIN_X = 0;
    private static final int MIN_Y = 0;

    private static final int ROOM_LIMIT = 200;   // maximum number of rooms




    /* Set font size to displayed. */
    private static final int TITLE_FONT_SIZE = 40;
    private static final int INITIAL_COMMANDS_FONT_SIZE = 30;
    private static final int HUD_FONT_SIZE = 16;


    /**
     * World
     * Generate a random world map contains rooms and hallways.
     */

    private static class World {
        private List<Room> rooms;
        private List<Hallway> hallways;
        private TETile[][] map;

        World() {
            rooms = new ArrayList<>();
            hallways = new ArrayList<>();
            map = new TETile[WIDTH][HEIGHT];
        }
    }

    /**
     * Region
     * The region of rooms and hallways should be connected.
     */
    private static class Region {
        List<Connect> connects;
        boolean connected;
    }

    /**
     * Room
     * The room is completely determined by its coordinates.
     */
    private static class Room extends Region {
        Coordinate topRight;
        Coordinate botLeft;

        Room(Coordinate topRight, Coordinate botLeft) {
            this.topRight = topRight;
            this.botLeft = botLeft;
            connected = false;
            connects = new ArrayList<>();
        }
    }

    /**
     * Hallway
     * Represents a generic hallway.
     */
    private static class Hallway extends Region {
        List<Coordinate> coors;

        Hallway() {
            coors = new ArrayList<>();
            connects = new ArrayList<>();
            connected = false;
        }
    }

    /**
     * Coordinate
     * Coordinates of the world.
     */
    protected static class Coordinate {
        int x;
        int y;

        Coordinate(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    /**
     * Connect
     * Connects rooms.
     */
    private static class Connect {
        Coordinate coors;
        Region connectTo;

        Connect(Coordinate coors, Region connectTo) {
            this.coors = coors;
            this.connectTo = connectTo;
        }
    }


    /**
     *
     * @param rand
     * @return
     */
    public static TETile[][] generateWorld(Random rand) {
        World world = new World();
        TETile[][] map = world.map;

        /* Initialize the world. */
        for (int x = 0; x < WIDTH; x++) {
            for (int y = 0; y < HEIGHT; y++) {
                map[x][y] = Tileset.NOTHING;
            }
        }
        // TODO: generate the world with rooms and connect them.
        generateRoom(world, rand);
        generateMaze(world, rand);


        return world.map;
    }

    /**
     * Generates random rooms in the world.
     * @param world the world contains random rooms.
     * @param rand  random generated by seed.
     */
    private static void generateRoom(World world, Random rand) {
        for (int i = 0; i < ROOM_LIMIT; i++) {
            /* Set room size. */
            int botLeftX = RandomUtils.uniform(rand, MIN_X, WIDTH);
            int botLeftY = RandomUtils.uniform(rand, MIN_Y, HEIGHT);
            int topRightX = 2 * RandomUtils.uniform(rand, (botLeftX + 1) / 2,
                    Integer.min(WIDTH, botLeftX + ROOMMAXLEN) / 2);
            int topRightY = 2 * RandomUtils.uniform(rand, (botLeftY + 1) / 2,
                    Integer.min(HEIGHT, botLeftY + ROOMMAXLEN) / 2);

            /* Generate World via Coordinates. */
            Room newRoom = new Room(new Coordinate(botLeftX, botLeftY),
                    new Coordinate(topRightX, topRightY));

            if (!isRoomOverlap(world, newRoom)) {
                world.rooms.add(newRoom);
            }
        }
        fillRoom(world);
    }


    /**
     * Check whether two rooms are overlapped.
     * @param world a list of rooms.
     * @param newRoom  the room to be checked.
     * @return
     */
    private static boolean isRoomOverlap(World world, Room newRoom) {
        for (int i = 0; i < world.rooms.size(); i++) {
            Room curRoom = world.rooms.get(i);
            boolean res;

            res = !(newRoom.topRight.x + 1 < curRoom.botLeft.x
                    || newRoom.topRight.y + 1 < curRoom.botLeft.y
                    || newRoom.botLeft.x - 1 > curRoom.topRight.x
                    || newRoom.botLeft.y - 1 > curRoom.topRight.y);

            if (res) {
                return true;
            }
        }
        return false;
    }

    /**
     * Fill rooms with floors and surround them with walls.
     *
     *  ---------------------------------
     *  |                   tR(x+1, y+1)|
     *  |  W          WALL           W  |
     *  |  A   |-----------------    A  |
     *  |  L   | Room    tR(x,y)|    L  |
     *  |  L   | bL(x,y)        |    L  |
     *  |      -------------------->    |
     *  |bL(x-1, y-1)    WALL           |
     *  ---------------------------------
     * @param world a list of rooms.
     */
    private static void fillRoom(World world) {
        for (int i = 0; i < world.rooms.size(); i++) {
            Room curRoom = world.rooms.get(i);

            /* Floors */
            for (int x = curRoom.botLeft.x; x <= curRoom.topRight.x; x++) {
                for (int y = curRoom.botLeft.y; y <= curRoom.topRight.y; y++) {
                    world.map[x][y] = Tileset.FLOOR;
                }
            }

            /* Walls */
            for (int x = curRoom.botLeft.x - 1; x <= curRoom.topRight.x + 1; x++) {
                world.map[x][curRoom.botLeft.y - 1] = Tileset.WALL;
                world.map[x][curRoom.topRight.y + 1] = Tileset.WALL;
            }

            for (int y = curRoom.botLeft.y ; y <= curRoom.topRight.y; y++) {
                world.map[curRoom.botLeft.x - 1][y] = Tileset.WALL;
                world.map[curRoom.topRight.x + 1][y] = Tileset.WALL;
            }
        }
    }

    /**
     * Maze Generation.
     * @param world a list of rooms.
     * @param rand random generated by seed.
     */
    private static void generateMaze(World world, Random rand) {
        for (int x = 1; x < WIDTH; x++) {
            for (int y = 1; y < HEIGHT; y++) {
                if (world.map[x][y].equals(Tileset.NOTHING)) {
                    Hallway hallway = new Hallway();
                    Coordinate coors = new Coordinate(x, y);
                    fillMaze(world.map, rand, hallway,coors);
                    hallwayWall(world.map, hallway);
                    world.hallways.add(hallway);
                }
            }
        }
    }

    // TODO: fill maze

    /**
     * Generate the maze using the flood fill algorithm.
     * @param map
     * @param rand
     * @param hallway
     * @param coors
     */
    private static void fillMaze(TETile[][] map, Random rand, Hallway hallway, Coordinate coors) {
        int x = coors.x;
        int y = coors.y;

        /* Check whether it is already filled or if it is at the boundary. */
        if (map[x][y].equals(Tileset.FLOOR) || map[x][y].equals(Tileset.WALL)
                || x == 0 || y == 0 || x == WIDTH || y == HEIGHT) {
            return;
        }

        // TODO: continuing...

    }








    // TODO: generate wall for Hallway

















    protected static Coordinate getPlayer() {
        for (int x = 0; x < WIDTH; x++) {
            for (int y = 0; y < WIDTH; y++) {
                // TODO: find the player and return it

            }
        }

        return null;

    }











    protected static void displayMessage(String message) {
        Font font = StdDraw.getFont();
        StdDraw.clear(StdDraw.BLACK);
        StdDraw.setPenColor(Color.WHITE);
        StdDraw.setFont(font.deriveFont(Font.BOLD, TITLE_FONT_SIZE));
        StdDraw.text(WIDTH / 2, HEIGHT / 2, message);
        StdDraw.setFont(font);
        StdDraw.show();
    }





}
